{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAWC,SAASC,cAAc,QAClCC,EAAaF,SAASC,cAAc,kBACpCE,EAAYH,SAASC,cAAc,iBACnCG,EAASJ,SAASC,cAAc,mBAEtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAIpCJ,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIbR,EAASe,iBAAiB,UAAUC,IAClCA,EAAMC,iBAEN,IAAIC,EAAQC,SAAShB,EAAWiB,OAEhC,IAAK,IAAIC,EAAI,EAAGA,GAAKhB,EAAOe,MAAOC,IACjCf,EAAce,EAAGH,GACdI,MAAK,EAACf,SAAEA,EAAQC,MAAEA,MAGjBe,EAAAzB,GAAS0B,OAAOC,QACd,uBAAqBlB,QAAiBC,MAAU,IAGnDkB,OAAM,EAACnB,SAAEA,EAAQC,MAAEA,MAGlBe,EAAAzB,GAAS0B,OAAOG,QACd,sBAAoBpB,QAAiBC,MAAU,IAIrDU,GAAgBC,SAASf,EAAUgB,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formData = document.querySelector('form');\nconst firstDelay = document.querySelector('[name=\"delay\"]');\nconst delayStep = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nformData.addEventListener('submit', event => {\n  event.preventDefault();\n\n  let delay = parseInt(firstDelay.value);\n\n  for (let i = 1; i <= amount.value; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        \n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay = delay + parseInt(delayStep.value);\n  }\n});\n// firstDelay.addEventListener('input', event => {\n//   console.log(event.target.value);\n// });\n/*\nW HTML znajduje się znacznik formularza, w którego pola użytkownik będzie wprowadzał pierwsze opóźnienie w milisekundach, stopień zwiększenia opóźnienia dla każdej kolejnej obietnicy i liczbę obietnic, które należy utworzyć.\n\n<form class=\"form\">\n  <label>\n    First delay (ms)\n    <input type=\"number\" name=\"delay\" required />\n  </label>\n  <label>\n    Delay step (ms)\n    <input type=\"number\" name=\"step\" required />\n  </label>\n  <label>\n    Amount\n    <input type=\"number\" name=\"amount\" required />\n  </label>\n  <button type=\"submit\">Create promises</button>\n</form>\n\nNapisz skrypt, który po wysłaniu formularza wywoła funkcję createPromise(position, delay) tyle razy, ile wprowadzono w pole amount. Po każdym wywołaniu przekaż jej numer utworzonej obietnicy (position) i opóźnienie, uwzględniając wprowadzone przez użytkownika pierwsze opóźnienie (delay) i stopień (step).\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\nUzupełnij kod funkcji createPromise tak, aby przywracała jedną obietnicę, którą realizuje się lub odkłada poprzez delay czasu. Wartością obietnicy powinien być obiekt, w którym będą właściwości position i delay z wartościami parametrów o tej samej nazwie. Użyj kodu początkowego funkcji, aby wybrać to, co należy zrobić z obietnicą - zrealizować lub odłożyć.\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n*/\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$formData","document","querySelector","$47d4ff9957288465$var$firstDelay","$47d4ff9957288465$var$delayStep","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","delay1","parseInt","value","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.c9147884.js.map"}